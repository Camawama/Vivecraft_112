--- a/net/minecraft/entity/EntityLiving.java
+++ b/net/minecraft/entity/EntityLiving.java
@@ -936,10 +936,30 @@
 
     public ItemStack getItemStackFromSlot(EntityEquipmentSlot slotIn)
     {
+        switch (slotIn.getSlotType())
+        {
+            case HAND:
+                return this.inventoryHands.get(slotIn.getIndex());
+
+            case ARMOR:
+                return this.inventoryArmor.get(slotIn.getIndex());
+
+            default:
+                return ItemStack.EMPTY;
+        }
     }
 
     public void setItemStackToSlot(EntityEquipmentSlot slotIn, ItemStack stack)
     {
+        switch (slotIn.getSlotType())
+        {
+            case HAND:
+                this.inventoryHands.set(slotIn.getIndex(), stack);
+                break;
+
+            case ARMOR:
+                this.inventoryArmor.set(slotIn.getIndex(), stack);
+        }
     }
 
     /**
@@ -947,6 +967,37 @@
      */
     protected void dropEquipment(boolean wasRecentlyHit, int lootingModifier)
     {
+        for (EntityEquipmentSlot entityequipmentslot : EntityEquipmentSlot.values())
+        {
+            ItemStack itemstack = this.getItemStackFromSlot(entityequipmentslot);
+            double d0;
+
+            switch (entityequipmentslot.getSlotType())
+            {
+                case HAND:
+                    d0 = (double)this.inventoryHandsDropChances[entityequipmentslot.getIndex()];
+                    break;
+
+                case ARMOR:
+                    d0 = (double)this.inventoryArmorDropChances[entityequipmentslot.getIndex()];
+                    break;
+
+                default:
+                    d0 = 0.0D;
+            }
+
+            boolean flag = d0 > 1.0D;
+
+            if (!itemstack.isEmpty() && !EnchantmentHelper.hasVanishingCurse(itemstack) && (wasRecentlyHit || flag) && (double)(this.rand.nextFloat() - (float)lootingModifier * 0.01F) < d0)
+            {
+                if (!flag && itemstack.isItemStackDamageable())
+                {
+                    itemstack.setItemDamage(itemstack.getMaxDamage() - this.rand.nextInt(1 + this.rand.nextInt(Math.max(itemstack.getMaxDamage() - 3, 1))));
+                }
+
+                this.entityDropItem(itemstack, 0.0F);
+            }
+        }
     }
 
     /**
@@ -1036,6 +1087,99 @@
     @Nullable
     public static Item getArmorByChance(EntityEquipmentSlot slotIn, int chance)
     {
+        switch (slotIn)
+        {
+            case HEAD:
+                if (chance == 0)
+                {
+                    return Items.LEATHER_HELMET;
+                }
+                else if (chance == 1)
+                {
+                    return Items.GOLDEN_HELMET;
+                }
+                else if (chance == 2)
+                {
+                    return Items.CHAINMAIL_HELMET;
+                }
+                else if (chance == 3)
+                {
+                    return Items.IRON_HELMET;
+                }
+                else if (chance == 4)
+                {
+                    return Items.DIAMOND_HELMET;
+                }
+
+            case CHEST:
+                if (chance == 0)
+                {
+                    return Items.LEATHER_CHESTPLATE;
+                }
+                else if (chance == 1)
+                {
+                    return Items.GOLDEN_CHESTPLATE;
+                }
+                else if (chance == 2)
+                {
+                    return Items.CHAINMAIL_CHESTPLATE;
+                }
+                else if (chance == 3)
+                {
+                    return Items.IRON_CHESTPLATE;
+                }
+                else if (chance == 4)
+                {
+                    return Items.DIAMOND_CHESTPLATE;
+                }
+
+            case LEGS:
+                if (chance == 0)
+                {
+                    return Items.LEATHER_LEGGINGS;
+                }
+                else if (chance == 1)
+                {
+                    return Items.GOLDEN_LEGGINGS;
+                }
+                else if (chance == 2)
+                {
+                    return Items.CHAINMAIL_LEGGINGS;
+                }
+                else if (chance == 3)
+                {
+                    return Items.IRON_LEGGINGS;
+                }
+                else if (chance == 4)
+                {
+                    return Items.DIAMOND_LEGGINGS;
+                }
+
+            case FEET:
+                if (chance == 0)
+                {
+                    return Items.LEATHER_BOOTS;
+                }
+                else if (chance == 1)
+                {
+                    return Items.GOLDEN_BOOTS;
+                }
+                else if (chance == 2)
+                {
+                    return Items.CHAINMAIL_BOOTS;
+                }
+                else if (chance == 3)
+                {
+                    return Items.IRON_BOOTS;
+                }
+                else if (chance == 4)
+                {
+                    return Items.DIAMOND_BOOTS;
+                }
+
+            default:
+                return null;
+        }
     }
 
     /**
