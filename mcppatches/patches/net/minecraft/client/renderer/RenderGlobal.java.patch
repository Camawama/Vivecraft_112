--- a/net/minecraft/client/renderer/RenderGlobal.java
+++ b/net/minecraft/client/renderer/RenderGlobal.java
@@ -742,8 +742,9 @@
             List<Entity> list2 = Lists.<Entity>newArrayList();
             BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.retain();
 
-            for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation : this.renderInfosEntities)
+            for (Object r : this.renderInfosEntities)
             {
+            	RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation = (ContainerLocalRenderInformation) r;
                 Chunk chunk = renderglobal$containerlocalrenderinformation.renderChunk.getChunk(this.world);
                 ClassInheritanceMultiMap<Entity> classinheritancemultimap = chunk.getEntityLists()[renderglobal$containerlocalrenderinformation.renderChunk.getPosition().getY() / 16];
 
@@ -907,8 +908,9 @@
 
             label251:
 
-            for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation1 : this.renderInfosTileEntities)
+            for (Object r : this.renderInfosTileEntities)
             {
+            	RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation1 = (ContainerLocalRenderInformation) r;
                 List<TileEntity> list3 = renderglobal$containerlocalrenderinformation1.renderChunk.getCompiledChunk().getTileEntities();
 
                 if (!list3.isEmpty())
@@ -1567,6 +1569,58 @@
     @SuppressWarnings("incomplete-switch")
     private void renderBlockLayer(BlockRenderLayer blockLayerIn)
     {
+        this.mc.entityRenderer.enableLightmap();
+
+        if (OpenGlHelper.useVbo())
+        {
+            GlStateManager.glEnableClientState(32884);
+            OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
+            GlStateManager.glEnableClientState(32888);
+            OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
+            GlStateManager.glEnableClientState(32888);
+            OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
+            GlStateManager.glEnableClientState(32886);
+        }
+
+        if (Config.isShaders())
+        {
+            ShadersRender.preRenderChunkLayer(blockLayerIn);
+        }
+
+        this.renderContainer.renderChunkLayer(blockLayerIn);
+
+        if (Config.isShaders())
+        {
+            ShadersRender.postRenderChunkLayer(blockLayerIn);
+        }
+
+        if (OpenGlHelper.useVbo())
+        {
+            for (VertexFormatElement vertexformatelement : DefaultVertexFormats.BLOCK.getElements())
+            {
+                VertexFormatElement.EnumUsage vertexformatelement$enumusage = vertexformatelement.getUsage();
+                int i = vertexformatelement.getIndex();
+
+                switch (vertexformatelement$enumusage)
+                {
+                    case POSITION:
+                        GlStateManager.glDisableClientState(32884);
+                        break;
+
+                    case UV:
+                        OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + i);
+                        GlStateManager.glDisableClientState(32888);
+                        OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
+                        break;
+
+                    case COLOR:
+                        GlStateManager.glDisableClientState(32886);
+                        GlStateManager.resetColor();
+                }
+            }
+        }
+
+        this.mc.entityRenderer.disableLightmap(); 	
     }
 
     private void cleanupDamagedBlocks(Iterator<DestroyBlockProgress> iteratorIn)
