--- a/net/minecraft/client/gui/GuiOverlayDebug.java
+++ b/net/minecraft/client/gui/GuiOverlayDebug.java
@@ -13,12 +13,19 @@
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.OpenGlHelper;
+import net.minecraft.entity.Entity;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.src.Reflector;
+import net.minecraft.util.EnumFacing;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.math.RayTraceResult;
 import net.minecraft.util.text.TextFormatting;
+import net.minecraft.world.DifficultyInstance;
+import net.minecraft.world.EnumSkyBlock;
 import net.minecraft.world.WorldType;
+import net.minecraft.world.chunk.Chunk;
+
 import org.lwjgl.opengl.Display;
 
 public class GuiOverlayDebug extends Gui
@@ -94,6 +101,104 @@
     @SuppressWarnings("incomplete-switch")
     protected List<String> call()
     {
+        BlockPos blockpos = new BlockPos(this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().getEntityBoundingBox().minY, this.mc.getRenderViewEntity().posZ);
+
+        if (this.mc.isReducedDebug())
+        {
+            return Lists.newArrayList("Minecraft 1.12 (" + this.mc.getVersion() + "/" + ClientBrandRetriever.getClientModName() + ")", this.mc.debug, this.mc.renderGlobal.getDebugInfoRenders(), this.mc.renderGlobal.getDebugInfoEntities(), "P: " + this.mc.effectRenderer.getStatistics() + ". T: " + this.mc.world.getDebugLoadedEntities(), this.mc.world.getProviderName(), "", String.format("Chunk-relative: %d %d %d", blockpos.getX() & 15, blockpos.getY() & 15, blockpos.getZ() & 15));
+        }
+        else
+        {
+            Entity entity = this.mc.getRenderViewEntity();
+            EnumFacing enumfacing = entity.getHorizontalFacing();
+            String s = "Invalid";
+
+            switch (enumfacing)
+            {
+                case NORTH:
+                    s = "Towards negative Z";
+                    break;
+
+                case SOUTH:
+                    s = "Towards positive Z";
+                    break;
+
+                case WEST:
+                    s = "Towards negative X";
+                    break;
+
+                case EAST:
+                    s = "Towards positive X";
+            }
+
+            List<String> list = Lists.newArrayList("Minecraft 1.12 (" + this.mc.getVersion() + "/" + ClientBrandRetriever.getClientModName() + ("release".equalsIgnoreCase(this.mc.getVersionType()) ? "" : "/" + this.mc.getVersionType()) + ")", this.mc.debug, this.mc.renderGlobal.getDebugInfoRenders(), this.mc.renderGlobal.getDebugInfoEntities(), "P: " + this.mc.effectRenderer.getStatistics() + ". T: " + this.mc.world.getDebugLoadedEntities(), this.mc.world.getProviderName(), "", String.format("XYZ: %.3f / %.5f / %.3f", this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().getEntityBoundingBox().minY, this.mc.getRenderViewEntity().posZ), String.format("Block: %d %d %d", blockpos.getX(), blockpos.getY(), blockpos.getZ()), String.format("Chunk: %d %d %d in %d %d %d", blockpos.getX() & 15, blockpos.getY() & 15, blockpos.getZ() & 15, blockpos.getX() >> 4, blockpos.getY() >> 4, blockpos.getZ() >> 4), String.format("Facing: %s (%s) (%.1f / %.1f)", enumfacing, s, MathHelper.wrapDegrees(entity.rotationYaw), MathHelper.wrapDegrees(entity.rotationPitch)));
+
+            if (this.mc.world != null)
+            {
+                Chunk chunk = this.mc.world.getChunkFromBlockCoords(blockpos);
+
+                if (this.mc.world.isBlockLoaded(blockpos) && blockpos.getY() >= 0 && blockpos.getY() < 256)
+                {
+                    if (!chunk.isEmpty())
+                    {
+                        list.add("Biome: " + chunk.getBiome(blockpos, this.mc.world.getBiomeProvider()).getBiomeName());
+                        list.add("Light: " + chunk.getLightSubtracted(blockpos, 0) + " (" + chunk.getLightFor(EnumSkyBlock.SKY, blockpos) + " sky, " + chunk.getLightFor(EnumSkyBlock.BLOCK, blockpos) + " block)");
+                        DifficultyInstance difficultyinstance = this.mc.world.getDifficultyForLocation(blockpos);
+
+                        if (this.mc.isIntegratedServerRunning() && this.mc.getIntegratedServer() != null)
+                        {
+                            EntityPlayerMP entityplayermp = this.mc.getIntegratedServer().getPlayerList().getPlayerByUUID(this.mc.player.getUniqueID());
+
+                            if (entityplayermp != null)
+                            {
+                                difficultyinstance = entityplayermp.world.getDifficultyForLocation(new BlockPos(entityplayermp));
+                            }
+                        }
+
+                        list.add(String.format("Local Difficulty: %.2f // %.2f (Day %d)", difficultyinstance.getAdditionalDifficulty(), difficultyinstance.getClampedAdditionalDifficulty(), this.mc.world.getWorldTime() / 24000L));
+                    }
+                    else
+                    {
+                        list.add("Waiting for chunk...");
+                    }
+                }
+                else
+                {
+                    list.add("Outside of world...");
+                }
+            }
+
+            if (this.mc.entityRenderer != null && this.mc.entityRenderer.isShaderActive())
+            {
+                list.add("Shader: " + this.mc.entityRenderer.getShaderGroup().getShaderGroupName());
+            }
+
+            if (this.mc.objectMouseOver != null && this.mc.objectMouseOver.typeOfHit == RayTraceResult.Type.BLOCK && this.mc.objectMouseOver.getBlockPos() != null)
+            {
+                BlockPos blockpos1 = this.mc.objectMouseOver.getBlockPos();
+                list.add(String.format("Looking at: %d %d %d", blockpos1.getX(), blockpos1.getY(), blockpos1.getZ()));
+            }
+
+//            list.add("c0 tm " + MCOpenVR.controllerHistory[0].averageSpeed(0.25));
+//            list.add("c1 tm " + MCOpenVR.controllerHistory[1].averageSpeed(0.25));
+//            list.add("mspd " + Minecraft.getMinecraft().runTracker.getSpeed());
+
+//	   			FloatBuffer buffer = mc.vrPlayer.getHMDMatrix_World();
+//	   			buffer.rewind();
+//	   			Matrix4f matrix = new Matrix4f();
+//	   			matrix.load(buffer);
+//                Quaternion headRotation = new Quaternion(matrix);
+//                list.add("HMD QUAT " + headRotation.toString());         
+//			    Vector3 forward = new Vector3(0,0,-1);
+//				Quaternion q = new Quaternion(headRotation.w, headRotation.x, headRotation.y, headRotation.z);
+//				Vector3 out = q.multiply(forward);
+//                list.add("HMD DIR " + Minecraft.getMinecraft().vrPlayer.getHMDDir_World().toString());
+//				list.add("HMD DIR2 " + out.toString());
+//            list.add("mspd " + PlayerModelController.getInstance().getRotationsForPlayer(Minecraft.getMinecraft().thePlayer.getUniqueID()).rightArm.toString());
+//            
+
+            return list;
+        }
     }
 
     protected <T extends Comparable<T>> List<String> getDebugInfoRight()
