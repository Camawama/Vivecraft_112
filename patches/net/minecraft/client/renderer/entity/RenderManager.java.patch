--- a/net/minecraft/client/renderer/entity/RenderManager.java
+++ b/net/minecraft/client/renderer/entity/RenderManager.java
@@ -1,6 +1,8 @@
 package net.minecraft.client.renderer.entity;
 
 import com.google.common.collect.Maps;
+import com.mtbs3d.minecrift.render.PlayerModelController;
+
 import java.util.Collections;
 import java.util.Map;
 import javax.annotation.Nullable;
@@ -121,8 +123,10 @@
 {
     private final Map < Class <? extends Entity > , Render <? extends Entity >> entityRenderMap = Maps. < Class <? extends Entity > , Render <? extends Entity >> newHashMap();
     private final Map<String, RenderPlayer> skinMap = Maps.<String, RenderPlayer>newHashMap();
+    private final Map<String, RenderPlayerVR> skinMapVR = Maps.<String, RenderPlayerVR>newHashMap();
     private final RenderPlayer playerRenderer;
-
+    private final RenderPlayerVR playerRendererVR;
+    
     /** Renders fonts */
     private FontRenderer textRenderer;
     private double renderPosX;
@@ -240,6 +244,9 @@
         this.playerRenderer = new RenderPlayer(this);
         this.skinMap.put("default", this.playerRenderer);
         this.skinMap.put("slim", new RenderPlayer(this, true));
+        this.playerRendererVR = new RenderPlayerVR(this);
+        this.skinMapVR.put("default", this.playerRendererVR);
+        this.skinMapVR.put("slim", new RenderPlayerVR(this, true));
         PlayerItemsLayer.register(this.skinMap);
 
         if (Reflector.RenderingRegistry_loadEntityRenderers.exists())
@@ -271,16 +278,22 @@
     @Nullable
     public <T extends Entity> Render<T> getEntityRenderObject(Entity entityIn)
     {
-        if (entityIn instanceof AbstractClientPlayer)
-        {
-            String s = ((AbstractClientPlayer)entityIn).getSkinType();
-            RenderPlayer renderplayer = this.skinMap.get(s);
-            return (Render<T>)(renderplayer != null ? renderplayer : this.playerRenderer);
-        }
-        else
-        {
-            return this.<T>getEntityClassRenderObject(entityIn.getClass());
-        }
+    	if (entityIn instanceof AbstractClientPlayer)
+    	{
+    		String s = ((AbstractClientPlayer)entityIn).getSkinType();
+    		RenderPlayer renderplayer = (RenderPlayer)this.skinMap.get(s);
+
+    		if(PlayerModelController.getInstance().isTracked(entityIn.getUniqueID()))
+    		{
+    			RenderPlayerVR renderplayervr = this.skinMapVR.get(s);
+    			return (Render<T>) (renderplayervr != null ? renderplayervr : this.playerRendererVR);            	
+    		}  else 
+    			return (Render<T>) (renderplayer != null ? renderplayer : this.playerRenderer);
+    	}      
+    	else
+    	{
+    		return this.<T>getEntityClassRenderObject(entityIn.getClass());
+    	}
     }
 
     public void cacheActiveRenderInfo(World worldIn, FontRenderer textRendererIn, Entity livingPlayerIn, Entity pointedEntityIn, GameSettings optionsIn, float partialTicks)
@@ -573,8 +586,10 @@
         return this.entityRenderMap;
     }
 
+    //Forge
     public Map<String, RenderPlayer> getSkinMap()
     {
         return Collections.<String, RenderPlayer>unmodifiableMap(this.skinMap);
     }
+    ///
 }
