--- a/net/minecraft/client/gui/GuiIngame.java
+++ b/net/minecraft/client/gui/GuiIngame.java
@@ -11,6 +11,9 @@
 import java.util.Map;
 import java.util.Random;
 import javax.annotation.Nullable;
+
+import org.lwjgl.opengl.GL11;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.Minecraft;
@@ -21,6 +24,8 @@
 import net.minecraft.client.gui.inventory.GuiContainer;
 import net.minecraft.client.renderer.BufferBuilder;
 import net.minecraft.client.renderer.GlStateManager;
+import net.minecraft.client.renderer.GlStateManager.DestFactor;
+import net.minecraft.client.renderer.GlStateManager.SourceFactor;
 import net.minecraft.client.renderer.OpenGlHelper;
 import net.minecraft.client.renderer.RenderHelper;
 import net.minecraft.client.renderer.RenderItem;
@@ -72,6 +77,7 @@
     private final Random rand = new Random();
     private final Minecraft mc;
     private final RenderItem itemRenderer;
+   public static final ResourceLocation INVENTORY_BACKGROUND = new ResourceLocation("textures/gui/container/inventory.png");
 
     /** ChatGUI instance that retains all previous chat data */
     private final GuiNewChat persistantChatGUI;
@@ -170,6 +176,7 @@
         FontRenderer fontrenderer = this.getFontRenderer();
         GlStateManager.enableBlend();
 
+        
         if (Config.isVignetteEnabled())
         {
             this.renderVignette(this.mc.player.getBrightness(), scaledresolution);
@@ -181,21 +188,13 @@
         }
 
         ItemStack itemstack = this.mc.player.inventory.armorItemInSlot(3);
-
+        mc.pumpkineffect = 0;
         if (this.mc.gameSettings.thirdPersonView == 0 && itemstack.getItem() == Item.getItemFromBlock(Blocks.PUMPKIN))
         {
-            this.renderPumpkinOverlay(scaledresolution);
+        	mc.pumpkineffect = 1f;
+           // this.renderPumpkinOverlay(scaledresolution);
         }
 
-        if (!this.mc.player.isPotionActive(MobEffects.NAUSEA))
-        {
-            float f = this.mc.player.prevTimeInPortal + (this.mc.player.timeInPortal - this.mc.player.prevTimeInPortal) * partialTicks;
-
-            if (f > 0.0F)
-            {
-                this.renderPortal(f, scaledresolution);
-            }
-        }
 
         if (this.mc.playerController.isSpectator())
         {
@@ -205,20 +204,28 @@
         {
             this.renderHotbar(scaledresolution, partialTicks);
         }
-
+        
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         this.mc.getTextureManager().bindTexture(ICONS);
         GlStateManager.enableBlend();
-        this.renderAttackIndicator(partialTicks, scaledresolution);
-        GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
+        
+       
+        //VIVE NOPE
+        //this.renderAttackIndicator(partialTicks, scaledresolution);
+        //NOPE
+        
+        GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+        
         this.mc.mcProfiler.startSection("bossHealth");
-        this.overlayBoss.renderBossHealth();
+        	this.overlayBoss.renderBossHealth();
         this.mc.mcProfiler.endSection();
+          
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         this.mc.getTextureManager().bindTexture(ICONS);
 
+        
         if (this.mc.playerController.shouldDrawHUD())
-        {
+        {      	
             this.renderPlayerStats(scaledresolution);
         }
 
@@ -400,7 +407,7 @@
         GlStateManager.enableAlpha();
     }
 
-    private void renderAttackIndicator(float p_184045_1_, ScaledResolution p_184045_2_)
+    protected void renderAttackIndicator(float p_184045_1_, ScaledResolution p_184045_2_)
     {
         GameSettings gamesettings = this.mc.gameSettings;
 
@@ -591,6 +598,7 @@
             int j = 182;
             int k = 91;
             this.zLevel = -90.0F;
+            GlStateManager.enableAlpha();
             this.drawTexturedModalRect(i - 91, sr.getScaledHeight() - 22, 0, 0, 182, 22);
             this.drawTexturedModalRect(i - 91 - 1 + entityplayer.inventory.currentItem * 20, sr.getScaledHeight() - 22 - 1, 0, 22, 24, 22);
 
@@ -609,7 +617,7 @@
             this.zLevel = f;
             GlStateManager.enableRescaleNormal();
             GlStateManager.enableBlend();
-            GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
+            GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);          
             RenderHelper.enableGUIStandardItemLighting();
             CustomItems.setRenderOffHand(false);
 
@@ -787,7 +795,7 @@
         this.mc.mcProfiler.endSection();
     }
 
-    private void renderScoreboard(ScoreObjective objective, ScaledResolution scaledRes)
+    protected void renderScoreboard(ScoreObjective objective, ScaledResolution scaledRes)
     {
         Scoreboard scoreboard = objective.getScoreboard();
         Collection<Score> collection = scoreboard.getSortedScores(objective);
@@ -845,11 +853,11 @@
         }
     }
 
-    private void renderPlayerStats(ScaledResolution scaledRes)
+    protected void renderPlayerStats(ScaledResolution scaledRes)
     {
         if (this.mc.getRenderViewEntity() instanceof EntityPlayer)
         {
-            EntityPlayer entityplayer = (EntityPlayer)this.mc.getRenderViewEntity();
+            EntityPlayer entityplayer = (EntityPlayer)this.mc.getRenderViewEntity();           
             int i = MathHelper.ceil(entityplayer.getHealth());
             boolean flag = this.healthUpdateCounter > (long)this.updateCounter && (this.healthUpdateCounter - (long)this.updateCounter) / 3L % 2L == 1L;
 
@@ -1004,7 +1012,7 @@
                     }
                 }
             }
-
+           
             Entity entity = entityplayer.getRidingEntity();
 
             if (entity == null || !(entity instanceof EntityLivingBase))
@@ -1068,7 +1076,7 @@
         }
     }
 
-    private void renderMountHealth(ScaledResolution p_184047_1_)
+    protected void renderMountHealth(ScaledResolution p_184047_1_)
     {
         if (this.mc.getRenderViewEntity() instanceof EntityPlayer)
         {
@@ -1122,7 +1130,7 @@
         }
     }
 
-    private void renderPumpkinOverlay(ScaledResolution scaledRes)
+    protected void renderPumpkinOverlay(ScaledResolution scaledRes)
     {
         GlStateManager.disableDepth();
         GlStateManager.depthMask(false);
@@ -1149,6 +1157,8 @@
      */
     private void renderVignette(float lightLevel, ScaledResolution scaledRes)
     {
+    	if(true) return;
+    	
         if (!Config.isVignetteEnabled())
         {
             GlStateManager.enableDepth();
@@ -1202,38 +1212,9 @@
         }
     }
 
-    private void renderPortal(float timeInPortal, ScaledResolution scaledRes)
+    protected void renderPortal(float timeInPortal, ScaledResolution scaledRes)
     {
-        if (timeInPortal < 1.0F)
-        {
-            timeInPortal = timeInPortal * timeInPortal;
-            timeInPortal = timeInPortal * timeInPortal;
-            timeInPortal = timeInPortal * 0.8F + 0.2F;
-        }
-
-        GlStateManager.disableAlpha();
-        GlStateManager.disableDepth();
-        GlStateManager.depthMask(false);
-        GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
-        GlStateManager.color(1.0F, 1.0F, 1.0F, timeInPortal);
-        this.mc.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
-        TextureAtlasSprite textureatlassprite = this.mc.getBlockRendererDispatcher().getBlockModelShapes().getTexture(Blocks.PORTAL.getDefaultState());
-        float f = textureatlassprite.getMinU();
-        float f1 = textureatlassprite.getMinV();
-        float f2 = textureatlassprite.getMaxU();
-        float f3 = textureatlassprite.getMaxV();
-        Tessellator tessellator = Tessellator.getInstance();
-        BufferBuilder bufferbuilder = tessellator.getBuffer();
-        bufferbuilder.begin(7, DefaultVertexFormats.POSITION_TEX);
-        bufferbuilder.pos(0.0D, (double)scaledRes.getScaledHeight(), -90.0D).tex((double)f, (double)f3).endVertex();
-        bufferbuilder.pos((double)scaledRes.getScaledWidth(), (double)scaledRes.getScaledHeight(), -90.0D).tex((double)f2, (double)f3).endVertex();
-        bufferbuilder.pos((double)scaledRes.getScaledWidth(), 0.0D, -90.0D).tex((double)f2, (double)f1).endVertex();
-        bufferbuilder.pos(0.0D, 0.0D, -90.0D).tex((double)f, (double)f1).endVertex();
-        tessellator.draw();
-        GlStateManager.depthMask(true);
-        GlStateManager.enableDepth();
-        GlStateManager.enableAlpha();
-        GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
+        
     }
 
     private void renderHotbarItem(int p_184044_1_, int p_184044_2_, float p_184044_3_, EntityPlayer player, ItemStack stack)
@@ -1428,4 +1409,43 @@
     {
         return this.overlayBoss;
     }
+
+    
+    //VIVECRAFT ADDITIONS ***********************************
+    
+	public void drawMouseMenuQuad(int mouseX, int mouseY)
+	{	
+		GlStateManager.enableBlend();
+		GlStateManager.blendFunc(SourceFactor.ONE_MINUS_DST_COLOR, DestFactor.ONE_MINUS_SRC_COLOR);
+		GlStateManager.disableDepth();
+		GlStateManager.disableLighting();
+		GlStateManager.colorMask(true, true, true, false);
+		GlStateManager.color(1, 1, 1, 1);
+
+		this.mc.getTextureManager().bindTexture(Gui.ICONS);
+		float menuMousePointerSize = 16f * this.mc.vrSettings.menuCrosshairScale;
+		this.mc.ingameGUI.drawCentredTexturedModalRect(mouseX, mouseY, menuMousePointerSize, menuMousePointerSize, 0, 0, 15, 15);
+		
+		GlStateManager.disableBlend();
+		GlStateManager.blendFunc(SourceFactor.SRC_ALPHA, DestFactor.ONE_MINUS_SRC_ALPHA);
+		GlStateManager.enableDepth();
+		GlStateManager.enableLighting();
+		GlStateManager.colorMask(true, true, true, false);
+	}
+    /**
+     * Draws a centred textured rectangle at the stored z-value. Args: x, y, width, height, u, v, texwidth, texheight
+     */
+    public void drawCentredTexturedModalRect(int centreX, int centreY, float width, float height, int u, int v, int texWidth, int texHeight)
+    {   	
+        float f = 0.00390625F;
+        float f1 = 0.00390625F;
+        Tessellator tessellator = Tessellator.getInstance();
+        tessellator.getBuffer().begin(GL11.GL_QUADS, DefaultVertexFormats.POSITION_TEX);
+        tessellator.getBuffer().pos(0, 0, 0).tex(u, v);
+        tessellator.getBuffer().pos((double)(centreX - (width / 2f)), (double)(centreY + (height / 2f)), (double)this.zLevel).tex((double)((float)(u + 0) * f), (double)((float)(v + texHeight) * f1)).endVertex();
+        tessellator.getBuffer().pos((double)(centreX + (width / 2f)), (double)(centreY + (height / 2f)), (double)this.zLevel).tex( (double)((float)(u + texWidth) * f), (double)((float)(v + texHeight) * f1)).endVertex();
+        tessellator.getBuffer().pos((double)(centreX + (width / 2f)), (double)(centreY - (height / 2f)), (double)this.zLevel).tex( (double)((float)(u + texWidth) * f), (double)((float)(v + 0) * f1)).endVertex();
+        tessellator.getBuffer().pos((double)(centreX - (width / 2f)), (double)(centreY - (height / 2f)), (double)this.zLevel).tex( (double)((float)(u + 0) * f), (double)((float)(v + 0) * f1)).endVertex();
+        tessellator.draw();
+    }
 }
