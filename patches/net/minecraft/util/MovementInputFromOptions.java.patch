--- a/net/minecraft/util/MovementInputFromOptions.java
+++ b/net/minecraft/util/MovementInputFromOptions.java
@@ -1,68 +1,148 @@
 package net.minecraft.util;
 
+import com.mtbs3d.minecrift.control.AxisInfo;
+import com.mtbs3d.minecrift.control.ButtonTuple;
+import com.mtbs3d.minecrift.control.VRButtonMapping;
+import com.mtbs3d.minecrift.provider.MCOpenVR;
+import com.mtbs3d.minecrift.provider.TrackedController;
+import com.mtbs3d.minecrift.settings.VRSettings;
+import com.mtbs3d.minecrift.utils.jkatvr;
+
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.main.Main;
 import net.minecraft.client.settings.GameSettings;
+import net.minecraft.client.settings.KeyBinding;
+
+public class MovementInputFromOptions extends MovementInput {
+	private final GameSettings gameSettings;
+
+	public MovementInputFromOptions(GameSettings gameSettingsIn) {
+		this.gameSettings = gameSettingsIn;
+	}
+
+	private float getMovementAxisValue(ButtonTuple button) {
+		TrackedController controller = button.controller.getController();
+		if (button.isTouch) return controller.isButtonTouched(button.button) ? 1 : 0;
+		float out = controller.getButtonAxisValue(button.button);
+
+		if(out <= Minecraft.getMinecraft().vrSettings.analogDeadzone)
+			return 0;
+		return out;
+	}
+
+	public void updatePlayerMoveState() {
+		this.moveStrafe = 0.0F;
+		this.moveForward = 0.0F;
+		Minecraft mc = Minecraft.getMinecraft();
+
+		boolean flag = false;
+		if (mc.climbTracker.isClimbeyClimb() && !mc.player.isInWater() && (mc.climbTracker.isGrabbingLadder()))
+			flag = true;
+
+		if (!flag && this.gameSettings.keyBindForward.isKeyDown()) {
+			++this.moveForward;
+			this.forwardKeyDown = true;
+		} else {
+			this.forwardKeyDown = false;
+		}
+
+		if (this.gameSettings.keyBindBack.isKeyDown()) {
+			--this.moveForward;
+			this.backKeyDown = true;
+		} else {
+			this.backKeyDown = false;
+		}
+
+		if (this.gameSettings.keyBindLeft.isKeyDown()) {
+			++this.moveStrafe;
+			this.leftKeyDown = true;
+		} else {
+			this.leftKeyDown = false;
+		}
+
+		if (this.gameSettings.keyBindRight.isKeyDown()) {
+			--this.moveStrafe;
+			this.rightKeyDown = true;
+		} else {
+			this.rightKeyDown = false;
+		}
+
+		if (mc.vrPlayer.getFreeMove() && !mc.vrSettings.seated && mc.currentScreen == null){
+			boolean set = false;
+			// override everything
+
+			if (mc.vrSettings.vrFreeMoveMode == mc.vrSettings.FREEMOVE_JOYPAD) {
+				this.moveForward = MCOpenVR.joyPadZ;
+				this.moveStrafe = MCOpenVR.joyPadX;
+				set = true;
+			} else 	if (mc.vrSettings.analogMovement) {
+				set = true;
+				this.moveForward = 0;
+				this.moveStrafe = 0;
+
+				ButtonTuple button = MCOpenVR.findAnyBindingButton(this.gameSettings.keyBindForward);
+				if (button != null && !flag) {
+					this.moveForward += getMovementAxisValue(button);
+				}
+
+				button = MCOpenVR.findAnyBindingButton(this.gameSettings.keyBindBack);
+				if (button != null) {
+					this.moveForward -= getMovementAxisValue(button);
+				}
+
+				button = MCOpenVR.findAnyBindingButton(this.gameSettings.keyBindRight);
+				if (button != null) {
+					this.moveStrafe -= getMovementAxisValue(button);
+				}
+
+				button = MCOpenVR.findAnyBindingButton(this.gameSettings.keyBindLeft);
+				if (button != null) {
+					this.moveStrafe += getMovementAxisValue(button);
+				}
+			} 
+
+			if(set && !flag) {
+				// just assuming all this below is needed for compatibility.
+				this.forwardKeyDown = this.moveForward > 0;
+				this.backKeyDown = this.moveForward < 0;
+				this.leftKeyDown = this.moveStrafe > 0;
+				this.rightKeyDown = this.moveStrafe < 0;
+				VRButtonMapping.setKeyBindState(this.gameSettings.keyBindForward, this.forwardKeyDown);
+				VRButtonMapping.setKeyBindState(this.gameSettings.keyBindBack, this.backKeyDown);
+				VRButtonMapping.setKeyBindState(this.gameSettings.keyBindLeft, this.leftKeyDown);
+				VRButtonMapping.setKeyBindState(this.gameSettings.keyBindRight, this.rightKeyDown);
+			}
+			
+		}
+		
+		boolean ok = mc.currentScreen == null && (mc.vrPlayer.getFreeMove() || mc.vrSettings.simulateFalling);
+
+		// VIVECRAFT DO ok.
+		this.jump = this.gameSettings.keyBindJump.isKeyDown() && ok;
+
+		if (mc.jumpTracker.isClimbeyJump())
+			this.jump = false;
+
+		if (this.gameSettings.keyBindJump.isKeyDown() == false)
+			this.jump = false;
+
+		this.sneak = (Minecraft.getMinecraft().sneakTracker.sneakOverride || this.gameSettings.keyBindSneak.isKeyDown())
+				&& mc.currentScreen == null;
+
+		if (this.sneak) {
+			this.moveStrafe = (float) ((double) this.moveStrafe * 0.3D);
+			this.moveForward = (float) ((double) this.moveForward * 0.3D);
+		}
+
+		// VIVECRAFT ADDITIONS ***
+		VRSettings vr = Minecraft.getMinecraft().vrSettings;
+		this.moveForward = this.moveForward * vr.movementSpeedMultiplier;
+		this.moveStrafe = this.moveStrafe * vr.movementSpeedMultiplier;
+
+		if (Main.katvr) {
+			this.moveStrafe = 0;
+			this.moveForward = jkatvr.getSpeed() * jkatvr.walkDirection() * vr.movementSpeedMultiplier;
+		}
 
-public class MovementInputFromOptions extends MovementInput
-{
-    private final GameSettings gameSettings;
-
-    public MovementInputFromOptions(GameSettings gameSettingsIn)
-    {
-        this.gameSettings = gameSettingsIn;
-    }
-
-    public void updatePlayerMoveState()
-    {
-        this.moveStrafe = 0.0F;
-        this.moveForward = 0.0F;
-
-        if (this.gameSettings.keyBindForward.isKeyDown())
-        {
-            ++this.moveForward;
-            this.forwardKeyDown = true;
-        }
-        else
-        {
-            this.forwardKeyDown = false;
-        }
-
-        if (this.gameSettings.keyBindBack.isKeyDown())
-        {
-            --this.moveForward;
-            this.backKeyDown = true;
-        }
-        else
-        {
-            this.backKeyDown = false;
-        }
-
-        if (this.gameSettings.keyBindLeft.isKeyDown())
-        {
-            ++this.moveStrafe;
-            this.leftKeyDown = true;
-        }
-        else
-        {
-            this.leftKeyDown = false;
-        }
-
-        if (this.gameSettings.keyBindRight.isKeyDown())
-        {
-            --this.moveStrafe;
-            this.rightKeyDown = true;
-        }
-        else
-        {
-            this.rightKeyDown = false;
-        }
-
-        this.jump = this.gameSettings.keyBindJump.isKeyDown();
-        this.sneak = this.gameSettings.keyBindSneak.isKeyDown();
-
-        if (this.sneak)
-        {
-            this.moveStrafe = (float)((double)this.moveStrafe * 0.3D);
-            this.moveForward = (float)((double)this.moveForward * 0.3D);
-        }
-    }
+	}
 }
